name: zama-kms-threshold
# TODO: proper networking between nodes
# add keygen, tls and pushing keys to s3 mock

services:
  # 1. Generate TLS certificates
  # NOTE: for now we do the key-generation here because kms-server requires one to start
  setup-kms-core-certs:
    container_name: ${DOCKER_COMPOSE_PROJECT}-setup-kms-core-certs
    image: ghcr.io/zama-ai/kms-service:${DOCKER_IMAGES_TAG}
    environment:
      - RUST_LOG=debug
    entrypoint: >
      /bin/sh -c " echo \"Starting tls certificates generation\" && kms-gen-tls-certs --ca-names kms-core-1 kms-core-2 kms-core-3 kms-core-4  && echo \"TLS certificates generated\" && exit 0 "
    volumes:
      - kms_core_certs:/app/kms/core/service/certs

  # 3. Initialize the different cores
  setup-kms-core-init:
    container_name: ${DOCKER_COMPOSE_PROJECT}-setup-kms-core-init
    image: ghcr.io/zama-ai/kms-service:${DOCKER_IMAGES_TAG}
    depends_on:
      kms-core-1:
        condition: service_healthy
      kms-core-2:
        condition: service_healthy
      kms-core-3:
        condition: service_healthy
      kms-core-4:
        condition: service_healthy
    environment:
      - RUST_LOG=info
      - RUN_MODE=dev
    entrypoint: >
      /bin/sh -c " echo \"Starting initialization procedure\" && kms-init -a http://kms-core-1:50100 http://kms-core-2:50200 http://kms-core-3:50300 http://kms-core-4:50400 && echo \"Core services initialization done\" && exit 0 "
  # 4. Deploy smart contracts
  setup-kms-blockchain-contracts:
    container_name: ${DOCKER_COMPOSE_PROJECT}-setup-kms-blockchain-contracts
    environment:
      - MODE=threshold

  # 2. We start all cores
  kms-core-1:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-core-1
    image: ghcr.io/zama-ai/kms-service:${DOCKER_IMAGES_TAG}
    ports:
      - "50051:50051"
      - "50100:50100"
    healthcheck:
      test: "grpc-health-probe --addr=localhost:50100"
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 1s
    volumes:
      - ../core/service/config/:/app/kms/core/service/config
      - kms_core_certs:/app/kms/core/service/certs
      - kms_minio_secrets:/minio_secrets
    depends_on:
      s3-mock-setup:
        condition: service_completed_successfully
      setup-kms-core-certs:
        condition: service_completed_successfully
    environment:
      - RUST_LOG=info
    # We do a key-gen first because otherwise the service won't start
    # NOTE: currently debugging the upload to s3
    # Credentials are set with both credentials file and env-var
    entrypoint: >
      /bin/sh -c " export AWS_ACCESS_KEY_ID=$$(cat /minio_secrets/access_key) && export AWS_SECRET_ACCESS_KEY=$$(cat /minio_secrets/secret_key) && mkdir -p ~/.aws/ && echo '[default]' > ~/.aws/credentials && echo 'aws_access_key_id = ${AWS_ACCESS_KEY_ID}' >> ~/.aws/credentials && echo 'aws_secret_access_key = ${AWS_SECRET_ACCESS_KEY}' >> ~/.aws/credentials && cat ~/.aws/credentials && echo '[default]' > ~/.aws/config && echo 'output=json' >> ~/.aws/config && echo 'region=us-east-1' >> ~/.aws/config && cat ~/.aws/config && echo 'Generating signing keys' && kms-gen-keys --pub-url s3://kms --aws-s3-endpoint http://s3-mock:9000 --aws-region us-east-1 --priv-url file://./keys --cmd signing-keys threshold  --signing-key-party-id 1 && echo 'Starting kms service' && kms-server --config-file config/compose_1.toml "

  kms-connector-1:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-connector-1
    build:
      context: .
      dockerfile: blockchain/connector/operations/docker/dev.dockerfile
    image: ghcr.io/zama-ai/kms-blockchain-connector:${DOCKER_IMAGES_TAG}
    volumes:
      - ../blockchain/connector/config/:/app/kms-connector/config
    command:
      - "kms-blockchain-connector"
      - "--conf-file"
      - "config/compose_1.toml"
    environment:
      - RUST_LOG=info
      - ASC_CONN__BLOCKCHAIN__ADDRESSES=http://kms-blockchain-validator:9090
      - ASC_CONN__CORE__ADDRESSES=http://kms-core-1:50100
      - ASC_CONN__STORE__URL=http://kms-kv-store:8088
      - ASC_CONN__CORE__TIMEOUT_CONFIG__DECRYPTION__INITIAL_WAIT_TIME=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__DECRYPTION__RETRY_INTERVAL=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__REENCRYPTION__INITIAL_WAIT_TIME=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__REENCRYPTION__RETRY_INTERVAL=1
    depends_on:
      setup-kms-blockchain-contracts:
        condition: service_completed_successfully
      setup-kms-core-init:
        condition: service_completed_successfully

  kms-core-2:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-core-2
    image: ghcr.io/zama-ai/kms-service:${DOCKER_IMAGES_TAG}
    ports:
      - "50052:50052"
      - "50200:50200"
    healthcheck:
      test: "grpc-health-probe --addr=localhost:50200"
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 1s
    volumes:
      - ../core/service/config/:/app/kms/core/service/config
      - kms_core_certs:/app/kms/core/service/certs
      - kms_minio_secrets:/minio_secrets
    depends_on:
      s3-mock-setup:
        condition: service_completed_successfully
      setup-kms-core-certs:
        condition: service_completed_successfully
    environment:
      - RUST_LOG=info
    entrypoint: >
      /bin/sh -c " export AWS_ACCESS_KEY_ID=$$(cat /minio_secrets/access_key) && export AWS_SECRET_ACCESS_KEY=$$(cat /minio_secrets/secret_key) && echo 'Generating signing keys' && kms-gen-keys --pub-url s3://kms --aws-s3-endpoint http://s3-mock:9000 --aws-region us-east-1 --priv-url file://./keys --cmd signing-keys threshold  --signing-key-party-id 2 && echo 'Starting kms service' && kms-server --config-file config/compose_2.toml "

  kms-connector-2:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-connector-2
    image: ghcr.io/zama-ai/kms-blockchain-connector:${DOCKER_IMAGES_TAG}
    volumes:
      - ../blockchain/connector/config/:/app/kms-connector/config
    command:
      - "kms-blockchain-connector"
      - "--conf-file"
      - "config/compose_2.toml"
    environment:
      - RUST_LOG=info
      - ASC_CONN__BLOCKCHAIN__ADDRESSES=http://kms-blockchain-validator:9090
      - ASC_CONN__CORE__ADDRESSES=http://kms-core-2:50200
      - ASC_CONN__STORE__URL=http://kv-store:8088
      - ASC_CONN__CORE__TIMEOUT_CONFIG__DECRYPTION__INITIAL_WAIT_TIME=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__DECRYPTION__RETRY_INTERVAL=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__REENCRYPTION__INITIAL_WAIT_TIME=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__REENCRYPTION__RETRY_INTERVAL=1
    depends_on:
      setup-kms-blockchain-contracts:
        condition: service_completed_successfully
      setup-kms-core-init:
        condition: service_completed_successfully

  kms-core-3:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-core-3
    image: ghcr.io/zama-ai/kms-service:${DOCKER_IMAGES_TAG}
    ports:
      - "50053:50053"
      - "50300:50300"
    healthcheck:
      test: "grpc-health-probe --addr=localhost:50300"
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 1s
    volumes:
      - kms_core_certs:/app/kms/core/service/certs
      - kms_minio_secrets:/minio_secrets
      - ../core/service/config/:/app/kms/core/service/config
    depends_on:
      s3-mock-setup:
        condition: service_completed_successfully
      setup-kms-core-certs:
        condition: service_completed_successfully
    environment:
      - RUST_LOG=info
    entrypoint: >
      /bin/sh -c " export AWS_ACCESS_KEY_ID=$$(cat /minio_secrets/access_key) && export AWS_SECRET_ACCESS_KEY=$$(cat /minio_secrets/secret_key) && echo 'Generating signing keys' && kms-gen-keys --pub-url s3://kms --aws-s3-endpoint http://s3-mock:9000 --aws-region us-east-1 --priv-url file://./keys --cmd signing-keys threshold --signing-key-party-id 3 && echo 'Starting kms service' && kms-server --config-file config/compose_3.toml "

  kms-connector-3:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-connector-3
    image: ghcr.io/zama-ai/kms-blockchain-connector:${DOCKER_IMAGES_TAG}
    volumes:
      - ../blockchain/connector/config/:/app/kms-connector/config
    command:
      - "kms-blockchain-connector"
      - "--conf-file"
      - "config/compose_3.toml"
    environment:
      - RUST_LOG=info
      - ASC_CONN__BLOCKCHAIN__ADDRESSES=http://kms-blockchain-validator:9090
      - ASC_CONN__CORE__ADDRESSES=http://kms-core-3:50300
      - ASC_CONN__STORE__URL=http://kms-kv-store:8088
      - ASC_CONN__CORE__TIMEOUT_CONFIG__DECRYPTION__INITIAL_WAIT_TIME=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__DECRYPTION__RETRY_INTERVAL=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__REENCRYPTION__INITIAL_WAIT_TIME=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__REENCRYPTION__RETRY_INTERVAL=1
    depends_on:
      setup-kms-blockchain-contracts:
        condition: service_completed_successfully
      setup-kms-core-init:
        condition: service_completed_successfully

  kms-core-4:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-core-4
    image: ghcr.io/zama-ai/kms-service:${DOCKER_IMAGES_TAG}
    ports:
      - "50054:50054"
      - "50400:50400"
    healthcheck:
      test: "grpc-health-probe --addr=localhost:50400"
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 1s
    volumes:
      - ../core/service/config/:/app/kms/core/service/config
      - kms_core_certs:/app/kms/core/service/certs
      - kms_minio_secrets:/minio_secrets
    depends_on:
      s3-mock-setup:
        condition: service_completed_successfully
      setup-kms-core-certs:
        condition: service_completed_successfully
    environment:
      - RUST_LOG=info
    entrypoint: >
      /bin/sh -c " export AWS_ACCESS_KEY_ID=$$(cat /minio_secrets/access_key) && export AWS_SECRET_ACCESS_KEY=$$(cat /minio_secrets/secret_key) && echo 'Generating signing keys' && kms-gen-keys --pub-url s3://kms --aws-s3-endpoint http://s3-mock:9000 --aws-region us-east-1 --priv-url file://./keys --cmd signing-keys threshold --signing-key-party-id 4 && echo 'Starting kms service' && kms-server --config-file config/compose_4.toml "

  kms-connector-4:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-connector-4
    image: ghcr.io/zama-ai/kms-blockchain-connector:${DOCKER_IMAGES_TAG}
    volumes:
      - ../blockchain/connector/config/:/app/kms-connector/config
    command:
      - "kms-blockchain-connector"
      - "--conf-file"
      - "config/compose_4.toml"
    environment:
      - RUST_LOG=info
      - ASC_CONN__BLOCKCHAIN__ADDRESSES=http://kms-blockchain-validator:9090
      - ASC_CONN__CORE__ADDRESSES=http://kms-core-4:50400
      - ASC_CONN__STORE__URL=http://kms-kv-store:8088
      - ASC_CONN__CORE__TIMEOUT_CONFIG__DECRYPTION__INITIAL_WAIT_TIME=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__DECRYPTION__RETRY_INTERVAL=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__REENCRYPTION__INITIAL_WAIT_TIME=1
      - ASC_CONN__CORE__TIMEOUT_CONFIG__REENCRYPTION__RETRY_INTERVAL=1
    depends_on:
      setup-kms-blockchain-contracts:
        condition: service_completed_successfully
      setup-kms-core-init:
        condition: service_completed_successfully

  debug:
    image: ubuntu:22.04
    # Keep container running
    command: tail -f /dev/null
    # For better interactive debugging
    stdin_open: true
    tty: true

volumes:
  kms_core_certs:
  kms_minio_secrets:
