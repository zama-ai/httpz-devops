# A docker compose file to be able to debug the kms
# The images take a bit of time to build

# TODO: add a faucet
services:
  # KMS Blockchain
  kms-blockchain-validator:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-blockchain-validator
    image: ghcr.io/zama-ai/kms-blockchain-asc:${DOCKER_IMAGES_TAG}
    healthcheck:
      test: "wget -Sq --spider http://localhost:26657/status"
      interval: 1s
      timeout: 1s
      retries: 5
      start_period: 10s
    ports:
      - "36656:26656"
      - "36657:26657"
      - "1317:1317"
      - "9090:9090"
    volumes:
      - ../blockchain/scripts:/app/scripts
      - kms_blockchain_validator_secrets:/app/secrets
    entrypoint: [ "/app/scripts/bootstrap_validator.sh" ]

  # Smart contract deployment
  setup-kms-blockchain-contracts:
    container_name: ${DOCKER_COMPOSE_PROJECT}-setup-kms-blockchain-contracts
    image: ghcr.io/zama-ai/kms-blockchain-asc:${DOCKER_IMAGES_TAG}
    restart: "no"
    depends_on:
      kms-blockchain-validator:
        condition: service_healthy
    environment:
      VALIDATOR_NODE_ENDPOINT: http://kms-blockchain-validator:26657
    build:
      context: .
      dockerfile: blockchain/contracts/operations/docker/ci.dockerfile
    volumes:
      - ../blockchain/scripts:/app/scripts
      - kms_blockchain_validator_secrets:/app/secrets
    entrypoint: |
      /bin/sh -c " chmod +x /app/scripts/setup_wallets.sh && chmod +x /app/scripts/deploy_contracts.sh &&
      /app/scripts/setup_wallets.sh && sleep 10 && /app/scripts/deploy_contracts.sh &&
      touch /tmp/done && sleep 65 && exit 0 "
    healthcheck:
      test: [ "CMD", "test", "-f", "/tmp/done" ]
      interval: 5s
      timeout: 1s
      retries: 240
      start_period: 60s

  # KV-Store
  kms-kv-store:
    container_name: ${DOCKER_COMPOSE_PROJECT}-kms-kv-store
    image: ghcr.io/zama-ai/kms-blockchain-gateway:${DOCKER_IMAGES_TAG}
    build:
      context: .
      dockerfile: blockchain/gateway/operations/docker/dev.dockerfile
    ports:
      - "8088:8088"
    volumes:
      - ../blockchain/gateway/config/gateway_centralized.toml:/app/gateway/config/gateway.toml
    command:
      - "kv_store"
    healthcheck:
      test: "wget -Sq --spider http://localhost:8088/status"
      interval: 2s
      timeout: 2s
      retries: 10
      start_period: 5s

  # S3 mock
  s3-mock:
    container_name: ${DOCKER_COMPOSE_PROJECT}-s3-mock
    image: quay.io/minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    entrypoint: >
      minio server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 1s
      timeout: 10s
      retries: 10

  # Minio client to create access keys
  s3-mock-setup:
    container_name: ${DOCKER_COMPOSE_PROJECT}-s3-mock-setup
    image: quay.io/minio/mc
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_ENDPOINT: "http://s3-mock:9000"
    entrypoint: |
      /bin/sh -c " sleep 1 && /usr/bin/mc alias set myminio $$MINIO_ENDPOINT ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD} &&
      ACCESS_KEY=$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1) &&
      SECRET_KEY=$$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 40 | head -n 1) &&
      /usr/bin/mc admin user add myminio $$ACCESS_KEY $$SECRET_KEY &&
      /usr/bin/mc admin policy attach myminio readwrite --user $$ACCESS_KEY &&
      echo '$ACCESS_KEY' && echo '$SECRET_KEY' && echo $$ACCESS_KEY > /minio_secrets/access_key &&
      echo $$SECRET_KEY > /minio_secrets/secret_key && cat /minio_secrets/access_key &&
      cat /minio_secrets/secret_key && mc mb --with-lock --ignore-existing myminio/kms && mc anonymous set public myminio/kms "
    volumes:
      - kms_minio_secrets:/minio_secrets
    depends_on:
      s3-mock:
        condition: service_healthy

volumes:
  kms_minio_secrets:
  kms_blockchain_validator_secrets:


secrets:
  BLOCKCHAIN_ACTIONS_TOKEN:
    environment: "BLOCKCHAIN_ACTIONS_TOKEN"
